#include <iostream>
#include <vector>
#include <string>
#include <fstream>
#include <algorithm>
#include <sstream>


using namespace std;
vector<vector<string>> NFA;
vector<string> fstates;
vector<string> finalDfa;
vector<vector<vector<string>>> fdfa;


vector<vector<vector<string>>> removeDup(vector<vector<vector<string>>> dfa) {
    vector<vector<vector<string>>> result;
    for (vector<vector<string>> row : dfa) {
        auto it = find(result.begin(), result.end(), row);
        if (it == result.end()) {
            result.push_back(row);
        }
    }
    return result;

}

bool contains(vector<string> container, string s) {

    bool result = false;
    for (string c : container) {
        if (c == s) {
            result = true;
        }
    }
    return result;
}


bool isPresent(vector<vector<vector<string>>> dfa, vector<string> state) {
    std::sort(state.begin(), state.end());

    for (vector<vector<string>> row : dfa) {
        vector<string> elem = row[0];
        std::sort(elem.begin(), elem.end());
        if (elem == state) {
            return true;
        }
    }
    return false;
}

void allstates(vector<string> vec) {
    for (string s : vec) {
        cout << s << " ";
    } 
    cout << endl;

    /*for (int i = 0; i < vec.size(); i++)
    {
        for (int j = 0; j < vec[i].size();)
            cout << vec[i][j];
     }*/
    }


bool isFinal(vector<string> state, vector<string> fstates) {
    for (unsigned int i = 0; i < state.size(); i++)
    {
        for (unsigned int j = 0; j < fstates.size(); j++) {
            if (state[i] == fstates[j]) // 
            {
                return true;
            }
        }
    }
}

vector<string> getTransition(vector<string> states, string alph, vector<vector<string>> transitions) {
    vector<string> result;
    // states [Q0,Q1]
    for (string s : states) {
        for (vector<string> v : transitions) {
            if (v[0] == s) {
                if ((v[1] == alph)) {
                    if (contains(result, v[2]) == false) {
                        result.push_back(v[2]);
                    }

                }
            }
        }
    }
    sort(result.begin(), result.end());

    return result;

}


int main() {

    vector<string> test;
    string start;
    vector<string> states;
    vector<vector<string>> finalstates;
    string input;
    vector<vector<string>> alphabetvector;
    vector<vector<string>> newstates;
    vector<vector<vector<string>>> dfa;


    // ifstream is used for reading files
    // We'll read from a file called Sample.dat

    ifstream is("NFA1.txt");

    // If we couldn't open the input file stream for reading
    if (!is)
    {
        // Print an error and exit
        cerr << "Uh oh, file could not be opened for reading!" << endl;
        exit(1);
    }

    // While there's still stuff left to read
    while (getline(is, input))
    {
        //read stuff from the file into a string and print it
        while (input != "STATES") {
            getline(is, input);
            vector<string> alphabet;
           // cout << input << endl;
            if (input != "STATES") {
                alphabet.push_back(input);
                alphabetvector.push_back(alphabet);
            }
        }
        while (input != "START") {
            getline(is, input);
          //  cout << input << endl;
            if (input != "START")
                states.push_back(input);
        }
        while (input != "FINAL") {
            getline(is, input);
          //  cout << input << endl;
            if (input != "FINAL")
                test.push_back(input);
        }
        while (input != "TRANSITIONS") {
            getline(is, input);
           // cout << input << endl;
            if (input != "TRANSITIONS") {
                fstates.push_back(input);
            }

        }
        while (input != "END") {
            getline(is, input);
            vector<string> transition;
            const char delim = ' ';
            stringstream ss(input);
            std::string s;
            while (std::getline(ss, s, delim)) {
                transition.push_back(s);
            }
            if (input != "END") {
                NFA.push_back(transition);
            }
        }
        /*    for (string i : transition) {
                  std::cout << i << ' ' << endl;
                  //alphabet.push_back(input);*/
      /*  for (int i = 0; i < NFA.size(); i++) {
            for (int j = 0; j < NFA[i].size(); j++)
                cout << NFA[i][j] << " ";
            cout << endl;
        }*/
    }

    for (vector<string> v : alphabetvector) {

        vector<vector<string>> dfaRow;
        //cout << "---------" << endl;
        vector<string> vec = getTransition(test, v[0], NFA);
        dfaRow.push_back(test);
        dfaRow.push_back(v);
        dfaRow.push_back(vec);
        if (isPresent(dfa, vec) == false) {
            newstates.push_back(vec);
        }
        dfa.push_back(dfaRow);
    }

    bool done = false;
    while (done == false) {
        if (newstates.empty() == false) {
            vector<string> v1 = newstates.back();
            newstates.pop_back();
            for (vector<string> v : alphabetvector) {
                vector<vector<string>> dfaRow;
               // cout << "---------" << endl;
                vector<string> vec = getTransition(v1, v[0], NFA);
                dfaRow.push_back(v1);
                dfaRow.push_back(v);
                dfaRow.push_back(vec);
                dfa.push_back(dfaRow);
                if (isFinal(vec, fstates) == true) {
                    finalstates.push_back(vec);
                }
                if (isPresent(dfa, vec) == false) {
                   
                    newstates.push_back(vec);
                }
            }
        }
        else {
            done = true;
        }
    }

    cout << "ALPHABET" << endl;
    for (int i = 0; i < alphabetvector.size(); i++) {
        for (int j = 0; j < alphabetvector[i].size(); j++)
            cout << alphabetvector[i][j];
        cout << endl;
    }

    fdfa = removeDup(dfa);
    cout << "STATES" << endl;

    /*for (int i = 0; i < fdfa.size();i++ ) {
        for (int j = 0; j < fdfa[i].size(); j++) {
            for (int k = 0; k < fdfa[i][j].size();) {
                cout << fdfa[i][j][k];
            }
            cout << endl;
        }
    }*/

    for (vector<vector<string>> row : fdfa) {
        allstates(row[0]);
        
    }

    /*for (string i : states) {
        std::cout << i << ' ' << endl;
    }*/
    cout << "START" << endl;
    for (string i : test) {
        std::cout << i << ' ' << endl;
    }
    cout << "FINAL" << endl;
    for (int i = 0; i < finalstates.size(); i++) {
        for (int j = 0; j < finalstates[i].size(); j++)
            cout << finalstates[i][j];
        cout << endl;
    }

    cout << "TRANSITIONS" << endl;
    for (vector<vector<string>> row : fdfa) {
        for (vector<string> elem : row) {
            for (string s : elem) {
                cout << s << " ";
            }
        }
        cout << endl;
    }

    return 0;

}
